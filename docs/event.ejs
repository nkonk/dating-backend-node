<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Trysto Event Creator</title>
</head>
<body>
  Trysto Dating - Events Page

  <!--

  Name : String,
  Display : String,
  MaleCount : String,
  FemaleCount : String,
  OtherCount : String,
  EventDate : String,
  EventTime : String,
  Duration : String,
  Image : String,
  Status : String

-->


<table class="events" border=1>
  <th>Event Id</th>
  <th>Name</th>
  <th>Display</th>
  <th>MaleCount</th>
  <th>FemaleCount</th>
  <th>OtherCount</th>
  <th>EventDate</th>
  <th>EventTime</th>
  <th>Duration</th>
  <th>Image</th>
  <th>Status</th>

  <% for(var i=0; i<events.length; i++) {%>
    <tr class="event">
      <td><%= events[i].EventId %></td>
      <td><%= events[i].Name %></td>
      <td><%= events[i].Display %></td>
      <td><%= events[i].MaleCount %></td>
      <td><%= events[i].FemaleCount %></td>
      <td><%= events[i].OtherCount %></td>
      <td><%= events[i].EventDate %></td>
      <td><%= events[i].EventTime %></td>
      <td><%= events[i].Duration %></td>
      <td><%= events[i].Image %></td>
      <td><%= events[i].Status %></td>
    </tr>
    <% } %>
  </table>
  <br/><br/><br/><br/>
  <form>
    <input type="text" placeholder="EventId" name="EventId">
    <input type="text" placeholder="Name" name="Name">
    <input type="text" placeholder="Display" name="Display">
    <input type="text" placeholder="MaleCount" name="MaleCount">
    <input type="text" placeholder="FemaleCount" name="FemaleCount">
    <input type="text" placeholder="OtherCount" name="OtherCount"><br/>
    <input type="text" placeholder="EventDate" name="EventDate">
    <input type="text" placeholder="EventTime" name="EventTime">
    <input type="text" placeholder="Duration" name="Duration">
    <input type="text" placeholder="Image" name="Image">
    <input type="text" placeholder="Status" name="Status"><br/><br/>
    <button onclick="addEvent()">Create Event</button>
  </form>
  <br/><br/>
  <form action="/api/v0/upload" method="post"
      enctype="multipart/form-data"
      >
    <input type="file" name="file" disabled>
    <button id="upload" type="submit" disabled>Upload Event Image</button>
  </form>

  <script type="text/javascript">
  //var dataStr = '<%- JSON.stringify(events) %>';
  //var data = JSON.parse(dataStr);
  // ...other javascript code to perform super cool stuff on my page...



  function addEvent() {
    var postEvent = {};

    postEvent = {
      EventId : document.getElementsByName('EventId')[0].value,
      Name : document.getElementsByName('Name')[0].value,
      Display : document.getElementsByName('Display')[0].value,
      MaleCount : document.getElementsByName('MaleCount')[0].value,
      FemaleCount : document.getElementsByName('FemaleCount')[0].value,
      OtherCount : document.getElementsByName('OtherCount')[0].value,
      EventDate : document.getElementsByName('EventDate')[0].value,
      EventTime : document.getElementsByName('EventTime')[0].value,
      Duration : document.getElementsByName('Duration')[0].value,
      Image : document.getElementsByName('Image')[0].value,
      Status : document.getElementsByName('Status')[0].value
    }
    console.log(postEvent);
    alert(JSON.stringify(postEvent) + document.getElementsByName('Name')[0].value);

    xhr = new XMLHttpRequest();
    var url = "http://50.63.161.150:9999/api/v0/createevent";
    xhr.open("POST", url, true);
    xhr.setRequestHeader("Content-type", "application/json");
    xhr.onreadystatechange = function () {
      if (xhr.readyState == 4 && xhr.status == 200) {
        var json = JSON.parse(xhr.responseText);
        console.log(json);
      }
    }
    var data = JSON.stringify(postEvent);
    xhr.send(data);
    console.log(data);

  }

  function addEventImage() {
    xhr = new XMLHttpRequest();
    var url = "http://50.63.161.150:9999/api/v0/upload";
    xhr.open("POST", url, true);
    xhr.setRequestHeader("Content-Type","multipart/form-data");
    xhr.onreadystatechange = function () {
      if (xhr.readyState == 4 && xhr.status == 200) {
        var json = JSON.parse(xhr.responseText);
        console.log(json);
      }
    }
    var boundary = this.getBoundary();
    var file = this.document.forms[1].elements.myImage.files["0"];
    var formData = new FormData();
    formData.append("myImage", file);
    xhr.send(formData);

  }


  /**
  * @param DOMNode form
  */
  var Uploader = function(form) {
    this.form = form;
  };

  Uploader.prototype = {
    /**
    * @param Object HTTP headers to send to the server, the key is the
    * header name, the value is the header value
    */
    headers : {},

    /**
    * @return Array of DOMNode elements
    */
    get elements() {

      var fields = [];

      // gather INPUT elements
      var inputs = this.form.getElementsByTagName("INPUT");
      for (var i=inputs.length, i=0; i--;) {
        fields.push(inputs[i]);
      }

      // gather SELECT elements
      var selects = this.form.getElementsByTagName("SELECT");
      for (var i=selects.length, i=0; i--;) {
        fields.push(selects[i]);
      }

      return fields;

    },

    /**
    * @return String A random string
    */
    generateBoundary: function() {

      return "AJAX-----------------------" + (new Date).getTime();
    },

    /**
    * Constructs the message as discussed in the section about form
    * data transmission over HTTP
    *
    * @param Array elements
    * @param String boundary
    * @return String
    */
    buildMessage : function(elements, boundary) {
      var CRLF = "\r\n";
      var parts = [];

      elements.forEach(function(element, index, all) {
        var part = "";
        var type = "TEXT";

        if (element.nodeName.toUpperCase() === "INPUT") {
          type = element.getAttribute("type").toUpperCase();
        }

        if (type === "FILE" && element.files.length > 0) {
          var fieldName = element.name;
          var fileName = element.files[0].fileName;

          /*
          * Content-Disposition header contains name of the field
          * used to upload the file and also the name of the file as
          * it was on the user's computer.
          */
          part += 'Content-Disposition: form-data; ';
          part += 'name="' + fieldName + '"; ';
          part += 'filename="'+ fileName + '"' + CRLF;

          /*
          * Content-Type header contains the mime-type of the file
          * to send. Although we could build a map of mime-types
          * that match certain file extensions, we'll take the easy
          * approach and send a general binary header:
          * application/octet-stream
          */
          part += "Content-Type: application/octet-stream";
          part += CRLF + CRLF; // marks end of the headers part

          /*
          * File contents read as binary data, obviously
          */
          part += element.files[0].getAsBinary() + CRLF;
        } else {
          /*
          * In case of non-files fields, Content-Disposition
          * contains only the name of the field holding the data.
          */
          part += 'Content-Disposition: form-data; ';
          part += 'name="' + element.name + '"' + CRLF + CRLF;

          /*
          * Field value
          */
          part += element.value + CRLF;
        }

        parts.push(part);
      });

      var request = "--" + boundary + CRLF;
      request+= parts.join("--" + boundary + CRLF);
      request+= "--" + boundary + "--" + CRLF;

      return request;

    },

    /**
    * @return null
    */
    send : function() {
      var boundary = this.generateBoundary();
      var xhr = new XMLHttpRequest;

      xhr.open("POST", this.form.action, true);
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          alert(xhr.responseText);
        }
      };
      var contentType = "multipart/form-data; boundary=" + boundary;
      xhr.setRequestHeader("Content-Type", contentType);

      for (var header in this.headers) {
        xhr.setRequestHeader(header, headers[header]);
      }

      // here's our data variable that we talked about earlier
      var data = this.buildMessage(this.elements, boundary);

      // finally send the request as binary data
      xhr.sendAsBinary(data);

    }
  };


    var form = document.getElementsByTagName("form")[1];
    var uploader = new Uploader(form);
    var uploadBtn = document.getElementById("upload");

    uploadBtn.addEventListener("click", function() {
        uploader.send();
    }, false);

  </script>
  </body>
  </html>
